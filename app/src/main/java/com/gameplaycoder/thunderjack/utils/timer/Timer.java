package com.gameplaycoder.thunderjack.utils.timer;

import android.os.Handler;

public class Timer {
  //=========================================================================
  // members
  //=========================================================================
  private OnCompleteListener m_onCompleteListener;
  private OnTickListener m_onTickListener;
  private Handler m_handler;
  private Runnable m_runnable;
  private long m_delay;
  private int m_repeatsRemaining;

  //=========================================================================
  // public
  //=========================================================================

  //-------------------------------------------------------------------------
  // ctor
  //-------------------------------------------------------------------------
  public Timer(long delay) {
    this(delay, 0);
  }

  //-------------------------------------------------------------------------
  // ctor
  //-------------------------------------------------------------------------
  public Timer(long delay, int repeatCount) {
    setDelay(delay);
    setRepeatCount(repeatCount);

    initTimerHandler();
    initTimerRunnable();
  }

  //-------------------------------------------------------------------------
  // getDelay
  //-------------------------------------------------------------------------
  public long getDelay() {
    return(m_delay);
  }

  //-------------------------------------------------------------------------
  // getRepeatsRemaining
  //-------------------------------------------------------------------------
  public int getRepeatsRemaining() {
    return(m_repeatsRemaining);
  }

  //-------------------------------------------------------------------------
  // getOnCompleteListener
  //-------------------------------------------------------------------------
  public OnCompleteListener getOnCompleteListener() {
    return(m_onCompleteListener);
  }

  //-------------------------------------------------------------------------
  // getOnTickListener
  //-------------------------------------------------------------------------
  public OnTickListener getOnTickListener() {
    return(m_onTickListener);
  }

  //-------------------------------------------------------------------------
  // setDelay
  //-------------------------------------------------------------------------
  public void setDelay(long value) {
    if (value >= 0) {
      m_delay = value;
    }
  }

  //-------------------------------------------------------------------------
  // setOnCompleteListener
  //-------------------------------------------------------------------------
  public void setOnCompleteListener(OnCompleteListener value) {
    m_onCompleteListener = value;
  }

  //-------------------------------------------------------------------------
  // setOnTickListener
  //-------------------------------------------------------------------------
  public void setOnTickListener(OnTickListener value) {
    m_onTickListener = value;
  }

  //-------------------------------------------------------------------------
  // setRepeatCount
  //-------------------------------------------------------------------------
  public void setRepeatCount(int value) {
    if (value >= 0) {
      m_repeatsRemaining = value;
    }
  }

  //-------------------------------------------------------------------------
  // start
  //-------------------------------------------------------------------------
  public void start() {
    m_handler.postDelayed(m_runnable, m_delay);
  }

  //-------------------------------------------------------------------------
  // stop
  //-------------------------------------------------------------------------
  public void stop() {
    m_handler.removeCallbacks(m_runnable);
  }

  //=========================================================================
  // private
  //=========================================================================

  //-------------------------------------------------------------------------
  // complete
  //-------------------------------------------------------------------------
  private void complete() {
    stop();
    notifyTick();
    notifyComplete();
  }

  //-------------------------------------------------------------------------
  // initTimerRunnable
  //-------------------------------------------------------------------------
  private void initTimerRunnable() {
    m_runnable = new Runnable() {
      //=========================================================================
      // public
      //=========================================================================

      //-------------------------------------------------------------------------
      // run
      //-------------------------------------------------------------------------
      @Override
      public void run() {
        if (shouldRepeat()) {
          repeat();
        } else {
          complete();
        }
      }
    };
  }

  //-------------------------------------------------------------------------
  // initTimerHandler
  //-------------------------------------------------------------------------
  private void initTimerHandler() {
    m_handler = new Handler();
  }

  //-------------------------------------------------------------------------
  // notifyComplete
  //-------------------------------------------------------------------------
  private void notifyComplete() {
    if (m_onCompleteListener != null) {
      m_onCompleteListener.onComplete(this);
    }
  }

  //-------------------------------------------------------------------------
  // notifyTick
  //-------------------------------------------------------------------------
  private void notifyTick() {
    if (m_onTickListener != null) {
      m_onTickListener.onTick(this);
    }
  }

  //-------------------------------------------------------------------------
  // shouldRepeat
  //-------------------------------------------------------------------------
  private boolean shouldRepeat() {
    return(m_repeatsRemaining > 0);
  }

  //-------------------------------------------------------------------------
  // repeat
  //-------------------------------------------------------------------------
  private void repeat() {
    m_repeatsRemaining--;
    notifyTick();
    start();
  }

  //=========================================================================
  // interfaces
  //=========================================================================

  //-------------------------------------------------------------------------
  // OnCompleteListener
  //-------------------------------------------------------------------------
  public interface OnCompleteListener {
    void onComplete(Timer timer);
  }

  //-------------------------------------------------------------------------
  // OnTickListener
  //-------------------------------------------------------------------------
  public interface OnTickListener {
    void onTick(Timer timer);
  }
}
